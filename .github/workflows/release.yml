# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Build MacOS App

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]


env:
  ENV_FILE_PATH: ./application/sourcefiles/telegram/environments.py

jobs:
      
  # build_macos:
  #     name: Build MacOS App
  #     runs-on: macos-latest

  #     steps:
  #       - name: Clone GitHub Repository
  #         uses: actions/checkout@v3
  #       - name: Create Telegram Enviroments Data
  #         run: |
  #           echo -ne "API_ID=${{ secrets.API_ID }}\n" > ${{ env.ENV_FILE_PATH }};
  #           echo -ne "API_HASH=${{ secrets.API_HASH }}\n" >> ${{ env.ENV_FILE_PATH }};

  #       - run: ls -la ./application/sourcefiles/telegram/; cat ./application/sourcefiles/telegram/environments.py 
        
  #       - name: JSON to variables
  #         uses: rgarcia-phi/json-to-variables@v1.1.0
  #         with:
  #           filename: 'config.json'
  #       - name: Install Dependencies
  #         run: pip install -r requirements.txt
  #       - name: Start Build Application
  #         run: |
  #           flet pack application/application.py \
  #           --product-name "${{ env.json_APP_NAME }} Application" \
  #           --product-version "${{ env.json_APP_VERSION }}" \
  #           --name "${{ env.json_APP_NAME }}" \
  #           --icon "./application/assets/psd/telegram.png" \
  #       - name: Upload Artifact
  #         uses: actions/upload-artifact@v3
  #         with:
  #           name: "${{ env.json_APP_NAME }}_macos_bin"
  #           path: dist/${{ env.json_APP_NAME }}.app
  
  build_linux:
    name: Build Linux App
    runs-on: ubuntu-latest
    # needs: build_macos

    steps:
      - name: Clone GitHub Repository
        uses: actions/checkout@v3
      - name: Create Telegram Enviroments Data
        run: |
          echo -ne "API_ID=${{ secrets.API_ID }}\n" > ${{ env.ENV_FILE_PATH }};
          echo -ne "API_HASH='${{ secrets.API_HASH }}'\n" >> ${{ env.ENV_FILE_PATH }};
      - run: ls -la ./application/sourcefiles/telegram/; cat ./application/sourcefiles/telegram/environments.py 
      - name: JSON to variables
        uses: rgarcia-phi/json-to-variables@v1.1.0
        with:
          filename: 'config.json'
      - name: Install Dependencies
        run: pip install -r requirements.txt
      - name: Start Build Application
        run: |
          flet pack application/application.py \
          --product-name "${{ env.json_APP_NAME }} Application" \
          --product-version "${{ env.json_APP_VERSION }}" \
          --name "${{ env.json_APP_NAME }}" \
          --icon "./application/assets/psd/telegram.png" \
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.json_APP_NAME }}_linux_bin"
          path: dist/${{ env.json_APP_NAME }}

  # build_win:
  #   name: Build Windows App
  #   runs-on: windows-latest
  #   needs: build_linux

  #   steps:
  #     - name: Clone GitHub Repo
  #       uses: actions/checkout@v3
  #     - name: Create Telegram Enviroments Data
  #       run: |
  #         echo -ne "API_ID=${{ secrets.API_ID }}\n" > ${{ env.ENV_FILE_PATH }};
  #         echo -ne "API_HASH=${{ secrets.API_HASH }}\n" >> ${{ env.ENV_FILE_PATH }};
  #     - name: JSON to variables
  #       uses: rgarcia-phi/json-to-variables@v1.1.0
  #       with:
  #         filename: 'config.json'
  #     - name: Install Dependencies
  #       run: pip install -r requirements.txt
  #     - name: Start Build Application
  #       run: | 
  #         flet pack application/application.py \
  #         --product-name "${{ env.json_APP_NAME }} Application" \
  #         --product-version "${{ env.json_APP_VERSION }}" \
  #         --name "${{ env.json_APP_NAME }}" \
  #         --icon "./application/assets/psd/telegram.png" \
  #       shell: bash
  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: "${{ env.json_APP_NAME }}_windows_bin"
  #         path: dist/${{ env.json_APP_NAME }}.exe

  release_project:
    name: Release Application
    runs-on: ubuntu-latest
    needs: build_linux

    steps:
    - name: Clone GitHub Repo
      uses: actions/checkout@v3

    - name: JSON to variables
      uses: rgarcia-phi/json-to-variables@v1.1.0
      with:
        filename: 'config.json'

    - name: Create Artifacts dir
      run: mkdir artifacts

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -R && pwd
      working-directory: artifacts

    # - name: Archive MacOS Application
    #   uses: thedoctor0/zip-release@master
    #   with:
    #     directory: "./artifacts"
    #     filename: "./${{ env.json_APP_NAME }}_macos_binary"
    #     path: "${{ env.json_APP_NAME }}_macos_bin"
      
    - name: Archive Linux Application
      uses: thedoctor0/zip-release@master
      with:
        directory: "./artifacts/${{ env.json_APP_NAME }}_linux_bin"
        filename: "../${{ env.json_APP_NAME }}_linux_binary"
        path: "."

    # - name: Archive Windows Application
    #   uses: thedoctor0/zip-release@master
    #   with:
    #     directory: "./artifacts/${{ env.json_APP_NAME }}_windows_bin"
    #     filename: "../${{ env.json_APP_NAME }}_windows_binary"
        # path: "."
    
    - run: ls -la ./artifacts && pwd
  
    - name: Create GitHub release
      id: create-new-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "${{ env.json_APP_VERSION }}"
        release_name: "v${{ env.json_APP_VERSION }}"
        body: "Release ${{ env.json_APP_NAME }}, ${{ env.json_APP_VERSION }}"


    - run: pwd && ls -la ./artifacts 
    # - name: Upload MacOS Release
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create-new-release.outputs.upload_url }}
    #     asset_path: "./artifacts/${{ env.json_APP_NAME }}_macos_binary.zip"
    #     asset_name: "${{ env.json_APP_NAME }}-MacOS-Binary.zip"
    #     asset_content_type: application/zip

    - name: Upload Linux Release
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-new-release.outputs.upload_url }}
        asset_path: "./artifacts/${{ env.json_APP_NAME }}_linux_binary.zip"
        asset_name: "${{ env.json_APP_NAME }}-Linux-Binary.zip"
        asset_content_type: application/zip

    # - name: Upload Windows Release
    #   uses: actions/upload-release-asset@v1.0.2
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create-new-release.outputs.upload_url }}
    #     asset_path: "./artifacts/${{ env.json_APP_NAME }}_windows_binary.zip"
    #     asset_name: "${{ env.json_APP_NAME }}-Windows-Binary.zip"
    #     asset_content_type: application/zip